{"ast":null,"code":"var _jsxFileName = \"/Users/satoshiaikawa/react-mui-bookstore-k8s/src/components/CheckoutForm/AddressForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { InputLabel, Select, MenuItem, Button, Grid, Typography, TextField } from '@mui/material';\nimport { useForm, FormProvider } from 'react-hook-form';\nimport { Link } from 'react-router-dom';\nimport { commerce } from '../../lib/commerce';\nimport { getSubdivisions, getShippingCountries, getShippingOptions } from './Checkout/data';\nimport CheckoutForm from './CheckoutForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst AddressForm = _ref => {\n  _s();\n\n  let {\n    checkoutToken,\n    submitShippingData,\n    customer\n  } = _ref;\n  const [firstname, setFirstname] = useState(customer.firstname);\n  const [lastname, setLastname] = useState(customer.lastname);\n  const [email, setEmail] = useState(customer.email);\n  const [address1, setAddress1] = useState('');\n  const [shippingCountries, setShippingCountries] = useState([]);\n  const [shippingCountry, setShippingCountry] = useState('');\n  const [shippingSubdivisions, setShippingSubdivisions] = useState([]);\n  const [shippingSubdivision, setShippingSubdivision] = useState('');\n  const [shippingOptions, setShippingOptions] = useState([]);\n  const [shippingOption, setShippingOption] = useState('');\n  const methods = useForm();\n\n  const fetchShippingCountries = async checkoutTokenId => {\n    const {\n      countries\n    } = await commerce.services.localeListShippingCountries(checkoutTokenId);\n    console.log(JSON.stringify(countries, null, 2));\n    setShippingCountries(countries);\n    setShippingCountry(Object.keys(countries)[0]);\n  };\n\n  const fetchSubdivisions = async countryCode => {\n    const {\n      subdivisions\n    } = await commerce.services.localeListSubdivisions(countryCode);\n    console.log(JSON.stringify(subdivisions, null, 2));\n    setShippingSubdivisions(subdivisions);\n    setShippingSubdivision(Object.keys(subdivisions)[0]);\n  };\n\n  const fetchShippingOptions = async function (checkoutTokenId, country) {\n    let stateProvince = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    const options = await commerce.checkout.getShippingOptions(checkoutTokenId, {\n      country,\n      region: stateProvince\n    });\n    console.log(JSON.stringify(options, null, 2));\n    setShippingOptions(options);\n    setShippingOption(options[0].id);\n  };\n\n  useEffect(() => {\n    fetchShippingCountries(checkoutToken.id);\n  }, []);\n  useEffect(() => {\n    if (shippingCountry) fetchSubdivisions(shippingCountry);\n  }, [shippingCountry]);\n  useEffect(() => {\n    if (shippingSubdivision) fetchShippingOptions(checkoutToken.id, shippingCountry, shippingSubdivision);\n  }, [shippingSubdivision]);\n  /*\n  const fetchShippingCountriesData =  (checkoutTokenId) => {\n    //const { countries } = await commerce.services.localeListShippingCountries(checkoutTokenId);\n    //console.log(commerce.services.localeListCountries().then(response => console.log(response.countries)));\n    console.log(commerce.services.localeListSubdivisions('JP').then(response => console.log(response.subdivisions)))\n    const  countries  = getShippingCountries();\n    \n    console.log(JSON.stringify(countries, null, 2));\n    console.log(countries)\n    setShippingCountries(countries);\n    setShippingCountry(Object.keys(countries)[0]);\n  };\n  \n  const fetchSubdivisionsData = (countryCode) => {\n    //const { subdivisions } = await commerce.services.localeListSubdivisions(countryCode);\n    //const  subdivisions  = JSON.parse(JSON.stringify(getSubdivisions()));\n    commerce.services.localeListSubdivisions('JP').then(response => {\n      console.log(response.subdivisions)\n      setShippingSubdivisions(response.subdivisions);\n      setShippingSubdivision(Object.keys(response.subdivisions)[0]);\n      })\n    //console.log(JSON.stringify(subdivisions, null, 2));\n    //setShippingSubdivisions(subdivisions);\n    //setShippingSubdivision(Object.keys(subdivisions)[0]);\n  };\n  \n  const fetchShippingOptionsData = (checkoutTokenId, country, stateProvince = null) => {\n    //const options = await commerce.checkout.getShippingOptions(checkoutTokenId, { country, region: stateProvince });\n    const options = JSON.parse(JSON.stringify(getShippingOptions()));\n    console.log(JSON.stringify(options, null, 2));\n  \n    setShippingOptions(options);\n    setShippingOption(options[0].id);\n  };\n  \n  useEffect(() => {\n    fetchShippingCountriesData(checkoutToken.id);\n  }, []);\n  \n  useEffect(() => {\n    if (shippingCountry) fetchSubdivisionsData(shippingCountry);\n  }, [shippingCountry]);\n  \n  useEffect(() => {\n    if (shippingSubdivision) fetchShippingOptionsData(checkoutToken.id, shippingCountry, shippingSubdivision);\n  }, [shippingSubdivision]);\n  */\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormProvider, { ...methods,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: methods.handleSubmit(data => submitShippingData({ ...data,\n          firstname,\n          lastname,\n          email,\n          shippingCountry,\n          shippingSubdivision,\n          shippingOption,\n          firstname,\n          lastname,\n          email,\n          address1\n        })),\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 3,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"first name\",\n              id: \"margin-normal\",\n              name: \"firstname\",\n              defaultValue: customer.firstname,\n              onChange: e => setFirstname(e.target.value),\n              helperText: \"Enter your first name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              required: true,\n              fullWidth: true,\n              label: \"last name\",\n              id: \"margin-normal\",\n              name: \"lastname\",\n              defaultValue: customer.lastname,\n              onChange: e => setLastname(e.target.value),\n              helperText: \"Enter your last name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              required: true,\n              fullWidth: true,\n              label: \"email address\",\n              id: \"margin-normal\",\n              name: \"email\",\n              defaultValue: customer.email,\n              onChange: e => setEmail(e.target.value),\n              helperText: \"Enter your email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              required: true,\n              fullWidth: true,\n              label: \"address 1\",\n              id: \"margin-normal\",\n              name: \"address1\" //defaultValue={formInput.email}\n              ,\n              onChange: e => setAddress1(e.target.value),\n              helperText: \"Enter your address\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              children: \"Shipping Country\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              value: shippingCountry,\n              fullWidth: true,\n              onChange: e => setShippingCountry(e.target.value),\n              children: Object.entries(shippingCountries).map(_ref2 => {\n                let [code, name] = _ref2;\n                return {\n                  id: code,\n                  label: name\n                };\n              }).map(item => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: item.id,\n                children: item.label\n              }, item.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              children: \"Shipping Subdivision\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              value: shippingSubdivision,\n              fullWidth: true,\n              onChange: e => setShippingSubdivision(e.target.value),\n              children: Object.entries(shippingSubdivisions).map(_ref3 => {\n                let [code, name] = _ref3;\n                return {\n                  id: code,\n                  label: name\n                };\n              }).map(item => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: item.id,\n                children: item.label\n              }, item.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              children: \"Shipping Options\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              value: shippingOption,\n              fullWidth: true,\n              onChange: e => setShippingOption(e.target.value),\n              children: shippingOptions.map(sO => ({\n                id: sO.id,\n                label: `${sO.description} - (${sO.price.formatted_with_symbol})`\n              })).map(item => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: item.id,\n                children: item.label\n              }, item.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'space-between'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            component: Link,\n            variant: \"outlined\",\n            to: \"/cart\",\n            children: \"Back to Cart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            variant: \"contained\",\n            color: \"primary\",\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AddressForm, \"4aMNVUCMH6hsOFpMimuBCtckuu8=\", false, function () {\n  return [useForm];\n});\n\n_c = AddressForm;\nexport default AddressForm;\n/*\n  \n            <FormInput required name=\"firstName\" label=\"First name\" />\n            <FormInput required name=\"lastName\" label=\"Last name\" />\n            <FormInput required name=\"address1\" label=\"Address line 1\" />\n            <FormInput required name=\"email\" label=\"Email\" />\n            <FormInput required name=\"city\" label=\"City\" />\n            <FormInput required name=\"zip\" label=\"Zip / Postal code\" />\n */\n\nvar _c;\n\n$RefreshReg$(_c, \"AddressForm\");","map":{"version":3,"sources":["/Users/satoshiaikawa/react-mui-bookstore-k8s/src/components/CheckoutForm/AddressForm.js"],"names":["React","useState","useEffect","InputLabel","Select","MenuItem","Button","Grid","Typography","TextField","useForm","FormProvider","Link","commerce","getSubdivisions","getShippingCountries","getShippingOptions","CheckoutForm","AddressForm","checkoutToken","submitShippingData","customer","firstname","setFirstname","lastname","setLastname","email","setEmail","address1","setAddress1","shippingCountries","setShippingCountries","shippingCountry","setShippingCountry","shippingSubdivisions","setShippingSubdivisions","shippingSubdivision","setShippingSubdivision","shippingOptions","setShippingOptions","shippingOption","setShippingOption","methods","fetchShippingCountries","checkoutTokenId","countries","services","localeListShippingCountries","console","log","JSON","stringify","Object","keys","fetchSubdivisions","countryCode","subdivisions","localeListSubdivisions","fetchShippingOptions","country","stateProvince","options","checkout","region","id","handleSubmit","data","e","target","value","entries","map","code","name","label","item","sO","description","price","formatted_with_symbol","display","justifyContent"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { InputLabel, Select, MenuItem, Button, Grid, Typography, TextField } from '@mui/material';\nimport { useForm, FormProvider } from 'react-hook-form';\nimport { Link } from 'react-router-dom';\n\nimport { commerce } from '../../lib/commerce';\n\nimport { getSubdivisions, getShippingCountries, getShippingOptions } from './Checkout/data';\nimport CheckoutForm from './CheckoutForm';\n\nconst AddressForm = ({ checkoutToken, submitShippingData, customer }) => {\n  const [firstname, setFirstname] = useState(customer.firstname);\n  const [lastname, setLastname] = useState(customer.lastname);\n  const [email, setEmail] = useState(customer.email);\n  const [address1, setAddress1] = useState('');\n  const [shippingCountries, setShippingCountries] = useState([]);\n  const [shippingCountry, setShippingCountry] = useState('');\n  const [shippingSubdivisions, setShippingSubdivisions] = useState([]);\n  const [shippingSubdivision, setShippingSubdivision] = useState('');\n  const [shippingOptions, setShippingOptions] = useState([]);\n  const [shippingOption, setShippingOption] = useState('');\n  const methods = useForm();\n\n\n  \n  const fetchShippingCountries = async (checkoutTokenId) => {\n    const { countries } = await commerce.services.localeListShippingCountries(checkoutTokenId);\n    console.log(JSON.stringify(countries, null, 2));\n    setShippingCountries(countries);\n    setShippingCountry(Object.keys(countries)[0]);\n  };\n\n  const fetchSubdivisions = async (countryCode) => {\n    const { subdivisions } = await commerce.services.localeListSubdivisions(countryCode);\n    console.log(JSON.stringify(subdivisions, null, 2));\n    setShippingSubdivisions(subdivisions);\n    setShippingSubdivision(Object.keys(subdivisions)[0]);\n  };\n\n  const fetchShippingOptions = async (checkoutTokenId, country, stateProvince = null) => {\n    const options = await commerce.checkout.getShippingOptions(checkoutTokenId, { country, region: stateProvince });\n    console.log(JSON.stringify(options, null, 2));\n\n    setShippingOptions(options);\n    setShippingOption(options[0].id);\n  };\n\n  useEffect(() => {\n    fetchShippingCountries(checkoutToken.id);\n  }, []);\n\n  useEffect(() => {\n    if (shippingCountry) fetchSubdivisions(shippingCountry);\n  }, [shippingCountry]);\n\n  useEffect(() => {\n    if (shippingSubdivision) fetchShippingOptions(checkoutToken.id, shippingCountry, shippingSubdivision);\n  }, [shippingSubdivision]);\n \n\n\n/*\nconst fetchShippingCountriesData =  (checkoutTokenId) => {\n  //const { countries } = await commerce.services.localeListShippingCountries(checkoutTokenId);\n  //console.log(commerce.services.localeListCountries().then(response => console.log(response.countries)));\n  console.log(commerce.services.localeListSubdivisions('JP').then(response => console.log(response.subdivisions)))\n  const  countries  = getShippingCountries();\n  \n  console.log(JSON.stringify(countries, null, 2));\n  console.log(countries)\n  setShippingCountries(countries);\n  setShippingCountry(Object.keys(countries)[0]);\n};\n\nconst fetchSubdivisionsData = (countryCode) => {\n  //const { subdivisions } = await commerce.services.localeListSubdivisions(countryCode);\n  //const  subdivisions  = JSON.parse(JSON.stringify(getSubdivisions()));\n  commerce.services.localeListSubdivisions('JP').then(response => {\n    console.log(response.subdivisions)\n    setShippingSubdivisions(response.subdivisions);\n    setShippingSubdivision(Object.keys(response.subdivisions)[0]);\n    })\n  //console.log(JSON.stringify(subdivisions, null, 2));\n  //setShippingSubdivisions(subdivisions);\n  //setShippingSubdivision(Object.keys(subdivisions)[0]);\n};\n\nconst fetchShippingOptionsData = (checkoutTokenId, country, stateProvince = null) => {\n  //const options = await commerce.checkout.getShippingOptions(checkoutTokenId, { country, region: stateProvince });\n  const options = JSON.parse(JSON.stringify(getShippingOptions()));\n  console.log(JSON.stringify(options, null, 2));\n\n  setShippingOptions(options);\n  setShippingOption(options[0].id);\n};\n\nuseEffect(() => {\n  fetchShippingCountriesData(checkoutToken.id);\n}, []);\n\nuseEffect(() => {\n  if (shippingCountry) fetchSubdivisionsData(shippingCountry);\n}, [shippingCountry]);\n\nuseEffect(() => {\n  if (shippingSubdivision) fetchShippingOptionsData(checkoutToken.id, shippingCountry, shippingSubdivision);\n}, [shippingSubdivision]);\n*/\n\n  return (\n    <>\n      <br/>\n      <FormProvider {...methods}>\n        <form onSubmit={methods.handleSubmit((data) => submitShippingData({ ...data, firstname, lastname, email, shippingCountry, shippingSubdivision, shippingOption, firstname, lastname, email, address1 }))}>\n          <Grid container spacing={3}>\n          <Grid item xs={12} sm={6}>\n          <TextField\n            fullWidth\n            label=\"first name\"\n            id=\"margin-normal\"\n            name=\"firstname\"\n            defaultValue={customer.firstname}\n            onChange={(e) => setFirstname(e.target.value)}\n            helperText=\"Enter your first name\"\n          />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n          <TextField\n            required\n            fullWidth\n            label=\"last name\"\n            id=\"margin-normal\"\n            name=\"lastname\"\n            defaultValue={customer.lastname}\n            onChange={(e) => setLastname(e.target.value)}\n            helperText=\"Enter your last name\"\n          />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n          <TextField\n            required\n            fullWidth\n            label=\"email address\"\n            id=\"margin-normal\"\n            name=\"email\"\n            defaultValue={customer.email}\n            onChange={(e) => setEmail(e.target.value)}\n            helperText=\"Enter your email\"\n          />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n          <TextField\n            required\n            fullWidth\n            label=\"address 1\"\n            id=\"margin-normal\"\n            name=\"address1\"\n            //defaultValue={formInput.email}\n            onChange={(e) => setAddress1(e.target.value)}\n            helperText=\"Enter your address\"\n          />\n          </Grid>\n            <Grid item xs={12} sm={6}>\n              <InputLabel>Shipping Country</InputLabel>\n              <Select value={shippingCountry} fullWidth onChange={(e) => setShippingCountry(e.target.value)}>\n                {Object.entries(shippingCountries).map(([code, name]) => ({ id: code, label: name })).map((item) => (\n                  <MenuItem key={item.id} value={item.id}>\n                    {item.label}\n                  </MenuItem>\n                ))}\n              </Select>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <InputLabel>Shipping Subdivision</InputLabel>\n              <Select value={shippingSubdivision} fullWidth onChange={(e) => setShippingSubdivision(e.target.value)}>\n                {Object.entries(shippingSubdivisions).map(([code, name]) => ({ id: code, label: name })).map((item) => (\n                  <MenuItem key={item.id} value={item.id}>\n                    {item.label}\n                  </MenuItem>\n                ))}\n              </Select>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <InputLabel>Shipping Options</InputLabel>\n              <Select value={shippingOption} fullWidth onChange={(e) => setShippingOption(e.target.value)}>\n                {shippingOptions.map((sO) => ({ id: sO.id, label: `${sO.description} - (${sO.price.formatted_with_symbol})` })).map((item) => (\n                  <MenuItem key={item.id} value={item.id}>\n                    {item.label}\n                  </MenuItem>\n                ))}\n              </Select>\n            </Grid>\n          </Grid>\n          <br />\n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n            <Button component={Link} variant=\"outlined\" to=\"/cart\">Back to Cart</Button>\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">Next</Button>\n          </div>\n        </form>\n      </FormProvider>\n    </>\n  );\n};\n\nexport default AddressForm;\n\n\n/*\n  \n            <FormInput required name=\"firstName\" label=\"First name\" />\n            <FormInput required name=\"lastName\" label=\"Last name\" />\n            <FormInput required name=\"address1\" label=\"Address line 1\" />\n            <FormInput required name=\"email\" label=\"Email\" />\n            <FormInput required name=\"city\" label=\"City\" />\n            <FormInput required name=\"zip\" label=\"Zip / Postal code\" />\n */"]},"metadata":{},"sourceType":"module"}
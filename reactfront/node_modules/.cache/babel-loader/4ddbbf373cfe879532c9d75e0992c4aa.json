{"ast":null,"code":"var _jsxFileName = \"/Users/satoshiaikawa/react-mui-bookstore-k8s/src/components/CheckoutForm/AddressForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { InputLabel, Select, MenuItem, Button, Grid, Typography } from '@mui/material';\nimport { useForm, FormProvider } from 'react-hook-form';\nimport { Link } from 'react-router-dom';\nimport { commerce } from '../../lib/commerce';\nimport FormInput from './CustomTextField';\nimport { getSubdivisions, getShippingCountries, getShippingOptions } from './Checkout/data';\nimport CheckoutForm from './CheckoutForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst AddressForm = _ref => {\n  _s();\n\n  let {\n    checkoutToken,\n    test\n  } = _ref;\n  const [shippingCountries, setShippingCountries] = useState([]);\n  const [shippingCountry, setShippingCountry] = useState('');\n  const [shippingSubdivisions, setShippingSubdivisions] = useState([]);\n  const [shippingSubdivision, setShippingSubdivision] = useState('');\n  const [shippingOptions, setShippingOptions] = useState([]);\n  const [shippingOption, setShippingOption] = useState('');\n  const methods = useForm();\n  /*\n  const fetchShippingCountries = async (checkoutTokenId) => {\n    const { countries } = await commerce.services.localeListShippingCountries(checkoutTokenId);\n    console.log(JSON.stringify(countries, null, 2));\n    setShippingCountries(countries);\n    setShippingCountry(Object.keys(countries)[0]);\n  };\n   const fetchSubdivisions = async (countryCode) => {\n    const { subdivisions } = await commerce.services.localeListSubdivisions(countryCode);\n    console.log(JSON.stringify(subdivisions, null, 2));\n    setShippingSubdivisions(subdivisions);\n    setShippingSubdivision(Object.keys(subdivisions)[0]);\n  };\n   const fetchShippingOptions = async (checkoutTokenId, country, stateProvince = null) => {\n    const options = await commerce.checkout.getShippingOptions(checkoutTokenId, { country, region: stateProvince });\n    console.log(JSON.stringify(options, null, 2));\n     setShippingOptions(options);\n    setShippingOption(options[0].id);\n  };\n   useEffect(() => {\n    fetchShippingCountries(checkoutToken.id);\n  }, []);\n   useEffect(() => {\n    if (shippingCountry) fetchSubdivisions(shippingCountry);\n  }, [shippingCountry]);\n   useEffect(() => {\n    if (shippingSubdivision) fetchShippingOptions(checkoutToken.id, shippingCountry, shippingSubdivision);\n  }, [shippingSubdivision]);\n  */\n\n  const fetchShippingCountriesData = checkoutTokenId => {\n    //const { countries } = await commerce.services.localeListShippingCountries(checkoutTokenId);\n    //console.log(commerce.services.localeListCountries().then(response => console.log(response.countries)));\n    console.log(commerce.services.localeListSubdivisions('JP').then(response => console.log(response.subdivisions)));\n    const countries = getShippingCountries();\n    console.log(JSON.stringify(countries, null, 2));\n    console.log(countries);\n    setShippingCountries(countries);\n    setShippingCountry(Object.keys(countries)[0]);\n  };\n\n  const fetchSubdivisionsData = countryCode => {\n    //const { subdivisions } = await commerce.services.localeListSubdivisions(countryCode);\n    //const  subdivisions  = JSON.parse(JSON.stringify(getSubdivisions()));\n    commerce.services.localeListSubdivisions('JP').then(response => {\n      console.log(response.subdivisions);\n      setShippingSubdivisions(response.subdivisions);\n      setShippingSubdivision(Object.keys(response.subdivisions)[0]);\n    }); //console.log(JSON.stringify(subdivisions, null, 2));\n    //setShippingSubdivisions(subdivisions);\n    //setShippingSubdivision(Object.keys(subdivisions)[0]);\n  };\n\n  const fetchShippingOptionsData = function (checkoutTokenId, country) {\n    let stateProvince = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    //const options = await commerce.checkout.getShippingOptions(checkoutTokenId, { country, region: stateProvince });\n    const options = JSON.parse(JSON.stringify(getShippingOptions()));\n    console.log(JSON.stringify(options, null, 2));\n    setShippingOptions(options);\n    setShippingOption(options[0].id);\n  };\n\n  useEffect(() => {\n    fetchShippingCountriesData(checkoutToken.id);\n  }, []);\n  useEffect(() => {\n    if (shippingCountry) fetchSubdivisionsData(shippingCountry);\n  }, [shippingCountry]);\n  useEffect(() => {\n    if (shippingSubdivision) fetchShippingOptionsData(checkoutToken.id, shippingCountry, shippingSubdivision);\n  }, [shippingSubdivision]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: \"Shipping address\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormProvider, { ...methods,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: methods.handleSubmit(data => test({ ...data,\n          shippingCountry,\n          shippingSubdivision,\n          shippingOption\n        })),\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 3,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              children: \"Shipping Country\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              value: shippingCountry,\n              fullWidth: true,\n              onChange: e => setShippingCountry(e.target.value),\n              children: Object.entries(shippingCountries).map(_ref2 => {\n                let [code, name] = _ref2;\n                return {\n                  id: code,\n                  label: name\n                };\n              }).map(item => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: item.id,\n                children: item.label\n              }, item.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              children: \"Shipping Subdivision\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              value: shippingSubdivision,\n              fullWidth: true,\n              onChange: e => setShippingSubdivision(e.target.value),\n              children: Object.entries(shippingSubdivisions).map(_ref3 => {\n                let [code, name] = _ref3;\n                return {\n                  id: code,\n                  label: name\n                };\n              }).map(item => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: item.id,\n                children: item.label\n              }, item.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              children: \"Shipping Options\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              value: shippingOption,\n              fullWidth: true,\n              onChange: e => setShippingOption(e.target.value),\n              children: shippingOptions.map(sO => ({\n                id: sO.id,\n                label: `${sO.description} - (${sO.price.formatted_with_symbol})`\n              })).map(item => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: item.id,\n                children: item.label\n              }, item.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'space-between'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            component: Link,\n            variant: \"outlined\",\n            to: \"/cart\",\n            children: \"Back to Cart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            variant: \"contained\",\n            color: \"primary\",\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AddressForm, \"yBkjz4WhZIg8xmhG/wRYC7utNEg=\", false, function () {\n  return [useForm];\n});\n\n_c = AddressForm;\nexport default AddressForm;\n/**\n  \n            <FormInput required name=\"firstName\" label=\"First name\" />\n            <FormInput required name=\"lastName\" label=\"Last name\" />\n            <FormInput required name=\"address1\" label=\"Address line 1\" />\n            <FormInput required name=\"email\" label=\"Email\" />\n            <FormInput required name=\"city\" label=\"City\" />\n            <FormInput required name=\"zip\" label=\"Zip / Postal code\" />\n */\n\nvar _c;\n\n$RefreshReg$(_c, \"AddressForm\");","map":{"version":3,"sources":["/Users/satoshiaikawa/react-mui-bookstore-k8s/src/components/CheckoutForm/AddressForm.jsx"],"names":["React","useState","useEffect","InputLabel","Select","MenuItem","Button","Grid","Typography","useForm","FormProvider","Link","commerce","FormInput","getSubdivisions","getShippingCountries","getShippingOptions","CheckoutForm","AddressForm","checkoutToken","test","shippingCountries","setShippingCountries","shippingCountry","setShippingCountry","shippingSubdivisions","setShippingSubdivisions","shippingSubdivision","setShippingSubdivision","shippingOptions","setShippingOptions","shippingOption","setShippingOption","methods","fetchShippingCountriesData","checkoutTokenId","console","log","services","localeListSubdivisions","then","response","subdivisions","countries","JSON","stringify","Object","keys","fetchSubdivisionsData","countryCode","fetchShippingOptionsData","country","stateProvince","options","parse","id","handleSubmit","data","e","target","value","entries","map","code","name","label","item","sO","description","price","formatted_with_symbol","display","justifyContent"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { InputLabel, Select, MenuItem, Button, Grid, Typography } from '@mui/material';\nimport { useForm, FormProvider } from 'react-hook-form';\nimport { Link } from 'react-router-dom';\n\nimport { commerce } from '../../lib/commerce';\nimport FormInput from './CustomTextField';\n\nimport { getSubdivisions, getShippingCountries, getShippingOptions } from './Checkout/data';\nimport CheckoutForm from './CheckoutForm';\n\nconst AddressForm = ({ checkoutToken, test }) => {\n  const [shippingCountries, setShippingCountries] = useState([]);\n  const [shippingCountry, setShippingCountry] = useState('');\n  const [shippingSubdivisions, setShippingSubdivisions] = useState([]);\n  const [shippingSubdivision, setShippingSubdivision] = useState('');\n  const [shippingOptions, setShippingOptions] = useState([]);\n  const [shippingOption, setShippingOption] = useState('');\n  const methods = useForm();\n\n\n  /*\n  const fetchShippingCountries = async (checkoutTokenId) => {\n    const { countries } = await commerce.services.localeListShippingCountries(checkoutTokenId);\n    console.log(JSON.stringify(countries, null, 2));\n    setShippingCountries(countries);\n    setShippingCountry(Object.keys(countries)[0]);\n  };\n\n  const fetchSubdivisions = async (countryCode) => {\n    const { subdivisions } = await commerce.services.localeListSubdivisions(countryCode);\n    console.log(JSON.stringify(subdivisions, null, 2));\n    setShippingSubdivisions(subdivisions);\n    setShippingSubdivision(Object.keys(subdivisions)[0]);\n  };\n\n  const fetchShippingOptions = async (checkoutTokenId, country, stateProvince = null) => {\n    const options = await commerce.checkout.getShippingOptions(checkoutTokenId, { country, region: stateProvince });\n    console.log(JSON.stringify(options, null, 2));\n\n    setShippingOptions(options);\n    setShippingOption(options[0].id);\n  };\n\n  useEffect(() => {\n    fetchShippingCountries(checkoutToken.id);\n  }, []);\n\n  useEffect(() => {\n    if (shippingCountry) fetchSubdivisions(shippingCountry);\n  }, [shippingCountry]);\n\n  useEffect(() => {\n    if (shippingSubdivision) fetchShippingOptions(checkoutToken.id, shippingCountry, shippingSubdivision);\n  }, [shippingSubdivision]);\n \n*/\n\nconst fetchShippingCountriesData =  (checkoutTokenId) => {\n  //const { countries } = await commerce.services.localeListShippingCountries(checkoutTokenId);\n  //console.log(commerce.services.localeListCountries().then(response => console.log(response.countries)));\n  console.log(commerce.services.localeListSubdivisions('JP').then(response => console.log(response.subdivisions)))\n  const  countries  = getShippingCountries();\n  \n  console.log(JSON.stringify(countries, null, 2));\n  console.log(countries)\n  setShippingCountries(countries);\n  setShippingCountry(Object.keys(countries)[0]);\n};\n\nconst fetchSubdivisionsData = (countryCode) => {\n  //const { subdivisions } = await commerce.services.localeListSubdivisions(countryCode);\n  //const  subdivisions  = JSON.parse(JSON.stringify(getSubdivisions()));\n  commerce.services.localeListSubdivisions('JP').then(response => {\n    console.log(response.subdivisions)\n    setShippingSubdivisions(response.subdivisions);\n    setShippingSubdivision(Object.keys(response.subdivisions)[0]);\n    })\n  //console.log(JSON.stringify(subdivisions, null, 2));\n  //setShippingSubdivisions(subdivisions);\n  //setShippingSubdivision(Object.keys(subdivisions)[0]);\n};\n\nconst fetchShippingOptionsData = (checkoutTokenId, country, stateProvince = null) => {\n  //const options = await commerce.checkout.getShippingOptions(checkoutTokenId, { country, region: stateProvince });\n  const options = JSON.parse(JSON.stringify(getShippingOptions()));\n  console.log(JSON.stringify(options, null, 2));\n\n  setShippingOptions(options);\n  setShippingOption(options[0].id);\n};\n\nuseEffect(() => {\n  fetchShippingCountriesData(checkoutToken.id);\n}, []);\n\nuseEffect(() => {\n  if (shippingCountry) fetchSubdivisionsData(shippingCountry);\n}, [shippingCountry]);\n\nuseEffect(() => {\n  if (shippingSubdivision) fetchShippingOptionsData(checkoutToken.id, shippingCountry, shippingSubdivision);\n}, [shippingSubdivision]);\n\n  return (\n    <>\n      <Typography variant=\"h6\" gutterBottom>Shipping address</Typography>\n      <FormProvider {...methods}>\n        <form onSubmit={methods.handleSubmit((data) => test({ ...data, shippingCountry, shippingSubdivision, shippingOption }))}>\n          <Grid container spacing={3}>\n\n            <Grid item xs={12} sm={6}>\n              <InputLabel>Shipping Country</InputLabel>\n              <Select value={shippingCountry} fullWidth onChange={(e) => setShippingCountry(e.target.value)}>\n                {Object.entries(shippingCountries).map(([code, name]) => ({ id: code, label: name })).map((item) => (\n                  <MenuItem key={item.id} value={item.id}>\n                    {item.label}\n                  </MenuItem>\n                ))}\n              </Select>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <InputLabel>Shipping Subdivision</InputLabel>\n              <Select value={shippingSubdivision} fullWidth onChange={(e) => setShippingSubdivision(e.target.value)}>\n                {Object.entries(shippingSubdivisions).map(([code, name]) => ({ id: code, label: name })).map((item) => (\n                  <MenuItem key={item.id} value={item.id}>\n                    {item.label}\n                  </MenuItem>\n                ))}\n              </Select>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <InputLabel>Shipping Options</InputLabel>\n              <Select value={shippingOption} fullWidth onChange={(e) => setShippingOption(e.target.value)}>\n                {shippingOptions.map((sO) => ({ id: sO.id, label: `${sO.description} - (${sO.price.formatted_with_symbol})` })).map((item) => (\n                  <MenuItem key={item.id} value={item.id}>\n                    {item.label}\n                  </MenuItem>\n                ))}\n              </Select>\n            </Grid>\n          </Grid>\n          <br />\n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n            <Button component={Link} variant=\"outlined\" to=\"/cart\">Back to Cart</Button>\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">Next</Button>\n          </div>\n        </form>\n      </FormProvider>\n    </>\n  );\n};\n\nexport default AddressForm;\n\n\n/**\n  \n            <FormInput required name=\"firstName\" label=\"First name\" />\n            <FormInput required name=\"lastName\" label=\"Last name\" />\n            <FormInput required name=\"address1\" label=\"Address line 1\" />\n            <FormInput required name=\"email\" label=\"Email\" />\n            <FormInput required name=\"city\" label=\"City\" />\n            <FormInput required name=\"zip\" label=\"Zip / Postal code\" />\n */"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/satoshiaikawa/react-mui-bookstore-k8s/src/components/CheckoutForm/PaymentForm.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Typography, Button, Divider } from '@mui/material';\nimport { Elements, CardElement, ElementsConsumer } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport Review from './Review';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n\nconst PaymentForm = _ref => {\n  let {\n    checkoutToken,\n    nextStep,\n    backStep,\n    shippingDataa,\n    onCaptureCheckout,\n    cart\n  } = _ref;\n\n  // <form onSubmit={(e) => handleSubmit(e, elements, stripe)}>\n  // <Button type=\"submit\"\n  // triggered when pay button is clicked\n  const handleSubmit = async (event, elements, stripe) => {\n    //現在のURLに対してフォームの送信が行われると、結果的にページがリロードされてしまいます。 \n    //そのため、event.preventDefault()を呼び出し、デフォルトの動作をキャンセルしていました。 \n    //event.preventDefault()をコメントアウトすると、ページがリロードされてしまうことが確認できます。\n    event.preventDefault();\n    if (!stripe || !elements) return;\n    const cardElement = elements.getElement(CardElement);\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement\n    });\n    console.log({\n      error,\n      paymentMethod\n    });\n\n    if (error) {\n      console.log('[error]', error);\n    } else {\n      const shippingData = {\n        firstname: 'John',\n        lastname: 'Doe',\n        email: 'john.doe@example.com'\n      };\n      const orderData = {\n        line_items: checkoutToken.live.line_items,\n        customer: {\n          firstname: shippingData.firstName,\n          lastname: shippingData.lastName,\n          email: shippingData.email\n        },\n        shipping: {\n          name: 'International',\n          street: shippingData.address1,\n          town_city: shippingData.city,\n          county_state: shippingData.shippingSubdivision,\n          postal_zip_code: shippingData.zip,\n          country: shippingData.shippingCountry\n        },\n        fulfillment: {\n          shipping_method: shippingData.shippingOption\n        },\n        payment: {\n          gateway: 'stripe',\n          stripe: {\n            payment_method_id: paymentMethod.id\n          }\n        }\n      };\n      onCaptureCheckout(checkoutToken.id, orderData);\n      nextStep();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Review, {\n      checkoutToken: checkoutToken,\n      cart: cart\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      style: {\n        margin: '20px 0'\n      },\n      children: \"Payment method\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Elements, {\n      stripe: stripePromise,\n      children: /*#__PURE__*/_jsxDEV(ElementsConsumer, {\n        children: _ref2 => {\n          let {\n            elements,\n            stripe\n          } = _ref2;\n          return /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: e => handleSubmit(e, elements, stripe),\n            children: [/*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 13\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 20\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                justifyContent: 'space-between'\n              },\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                onClick: backStep,\n                children: \"Back\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                variant: \"contained\",\n                disabled: !stripe,\n                style: {\n                  backgroundColor: '#1C2331',\n                  color: '#FFFF'\n                },\n                children: [\"Pay \", checkoutToken.live.subtotal.formatted_with_symbol]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 11\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_c = PaymentForm;\nexport default PaymentForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentForm\");","map":{"version":3,"sources":["/Users/satoshiaikawa/react-mui-bookstore-k8s/src/components/CheckoutForm/PaymentForm.js"],"names":["React","useState","useEffect","Typography","Button","Divider","Elements","CardElement","ElementsConsumer","loadStripe","Review","stripePromise","process","env","REACT_APP_STRIPE_PUBLIC_KEY","PaymentForm","checkoutToken","nextStep","backStep","shippingDataa","onCaptureCheckout","cart","handleSubmit","event","elements","stripe","preventDefault","cardElement","getElement","error","paymentMethod","createPaymentMethod","type","card","console","log","shippingData","firstname","lastname","email","orderData","line_items","live","customer","firstName","lastName","shipping","name","street","address1","town_city","city","county_state","shippingSubdivision","postal_zip_code","zip","country","shippingCountry","fulfillment","shipping_method","shippingOption","payment","gateway","payment_method_id","id","margin","e","display","justifyContent","backgroundColor","color","subtotal","formatted_with_symbol"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,OAA7B,QAA4C,eAA5C;AACA,SAASC,QAAT,EAAmBC,WAAnB,EAAgCC,gBAAhC,QAAwD,yBAAxD;AACA,SAASC,UAAT,QAA2B,mBAA3B;AAEA,OAAOC,MAAP,MAAmB,UAAnB;;;AAEA,MAAMC,aAAa,GAAGF,UAAU,CAACG,OAAO,CAACC,GAAR,CAAYC,2BAAb,CAAhC;;AAEA,MAAMC,WAAW,GAAG,QAAmF;AAAA,MAAlF;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA,QAAjB;AAA2BC,IAAAA,QAA3B;AAAqCC,IAAAA,aAArC;AAAoDC,IAAAA,iBAApD;AAAuEC,IAAAA;AAAvE,GAAkF;;AAErG;AACA;AACA;AACA,QAAMC,YAAY,GAAG,OAAOC,KAAP,EAAcC,QAAd,EAAwBC,MAAxB,KAAmC;AACtD;AACA;AACA;AACAF,IAAAA,KAAK,CAACG,cAAN;AAEA,QAAI,CAACD,MAAD,IAAW,CAACD,QAAhB,EAA0B;AAE1B,UAAMG,WAAW,GAAGH,QAAQ,CAACI,UAAT,CAAoBrB,WAApB,CAApB;AAEA,UAAM;AAAEsB,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAA2B,MAAML,MAAM,CAACM,mBAAP,CAA2B;AAAEC,MAAAA,IAAI,EAAE,MAAR;AAAgBC,MAAAA,IAAI,EAAEN;AAAtB,KAA3B,CAAvC;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAEN,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAZ;;AAEA,QAAID,KAAJ,EAAW;AACTK,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBN,KAAvB;AACD,KAFD,MAEO;AACL,YAAMO,YAAY,GAAC;AACjBC,QAAAA,SAAS,EAAE,MADM;AAEjBC,QAAAA,QAAQ,EAAE,KAFO;AAGjBC,QAAAA,KAAK,EAAE;AAHU,OAAnB;AAMA,YAAMC,SAAS,GAAG;AAChBC,QAAAA,UAAU,EAAEzB,aAAa,CAAC0B,IAAd,CAAmBD,UADf;AAEhBE,QAAAA,QAAQ,EAAE;AAAEN,UAAAA,SAAS,EAAED,YAAY,CAACQ,SAA1B;AAAqCN,UAAAA,QAAQ,EAAEF,YAAY,CAACS,QAA5D;AAAsEN,UAAAA,KAAK,EAAEH,YAAY,CAACG;AAA1F,SAFM;AAGhBO,QAAAA,QAAQ,EAAE;AAAEC,UAAAA,IAAI,EAAE,eAAR;AAAyBC,UAAAA,MAAM,EAAEZ,YAAY,CAACa,QAA9C;AAAwDC,UAAAA,SAAS,EAAEd,YAAY,CAACe,IAAhF;AAAsFC,UAAAA,YAAY,EAAEhB,YAAY,CAACiB,mBAAjH;AAAsIC,UAAAA,eAAe,EAAElB,YAAY,CAACmB,GAApK;AAAyKC,UAAAA,OAAO,EAAEpB,YAAY,CAACqB;AAA/L,SAHM;AAIhBC,QAAAA,WAAW,EAAE;AAAEC,UAAAA,eAAe,EAAEvB,YAAY,CAACwB;AAAhC,SAJG;AAKhBC,QAAAA,OAAO,EAAE;AACPC,UAAAA,OAAO,EAAE,QADF;AAEPrC,UAAAA,MAAM,EAAE;AACNsC,YAAAA,iBAAiB,EAAEjC,aAAa,CAACkC;AAD3B;AAFD;AALO,OAAlB;AAaA5C,MAAAA,iBAAiB,CAACJ,aAAa,CAACgD,EAAf,EAAmBxB,SAAnB,CAAjB;AAEAvB,MAAAA,QAAQ;AACT;AACF,GAvCD;;AAyCA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,aAAa,EAAED,aAAvB;AAAsC,MAAA,IAAI,EAAEK;AAA5C;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,UAAD;AAAY,MAAA,OAAO,EAAC,IAApB;AAAyB,MAAA,YAAY,MAArC;AAAsC,MAAA,KAAK,EAAE;AAAE4C,QAAAA,MAAM,EAAE;AAAV,OAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE,QAAC,QAAD;AAAU,MAAA,MAAM,EAAEtD,aAAlB;AAAA,6BACE,QAAC,gBAAD;AAAA,kBAAmB;AAAA,cAAC;AAAEa,YAAAA,QAAF;AAAYC,YAAAA;AAAZ,WAAD;AAAA,8BACjB;AAAM,YAAA,QAAQ,EAAGyC,CAAD,IAAO5C,YAAY,CAAC4C,CAAD,EAAI1C,QAAJ,EAAcC,MAAd,CAAnC;AAAA,oCACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAA;AAAA;AAAA;AAAA,oBAFF,oBAES;AAAA;AAAA;AAAA;AAAA,oBAFT,eAGE;AAAK,cAAA,KAAK,EAAE;AAAE0C,gBAAAA,OAAO,EAAE,MAAX;AAAmBC,gBAAAA,cAAc,EAAE;AAAnC,eAAZ;AAAA,sCACE,QAAC,MAAD;AAAQ,gBAAA,OAAO,EAAC,UAAhB;AAA2B,gBAAA,OAAO,EAAElD,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE,QAAC,MAAD;AAAQ,gBAAA,IAAI,EAAC,QAAb;AAAsB,gBAAA,OAAO,EAAC,WAA9B;AAA0C,gBAAA,QAAQ,EAAE,CAACO,MAArD;AAA6D,gBAAA,KAAK,EAAE;AAAE4C,kBAAAA,eAAe,EAAE,SAAnB;AAA8BC,kBAAAA,KAAK,EAAE;AAArC,iBAApE;AAAA,mCACOtD,aAAa,CAAC0B,IAAd,CAAmB6B,QAAnB,CAA4BC,qBADnC;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,kBADiB;AAAA;AAAnB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA,kBADF;AAsBD,CApED;;KAAMzD,W;AAsEN,eAAeA,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Typography, Button, Divider } from '@mui/material';\nimport { Elements, CardElement, ElementsConsumer } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\n\nimport Review from './Review';\n\nconst stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n\nconst PaymentForm = ({ checkoutToken, nextStep, backStep, shippingDataa, onCaptureCheckout, cart }) => {\n\n  // <form onSubmit={(e) => handleSubmit(e, elements, stripe)}>\n  // <Button type=\"submit\"\n  // triggered when pay button is clicked\n  const handleSubmit = async (event, elements, stripe) => {\n    //現在のURLに対してフォームの送信が行われると、結果的にページがリロードされてしまいます。 \n    //そのため、event.preventDefault()を呼び出し、デフォルトの動作をキャンセルしていました。 \n    //event.preventDefault()をコメントアウトすると、ページがリロードされてしまうことが確認できます。\n    event.preventDefault();\n\n    if (!stripe || !elements) return;\n\n    const cardElement = elements.getElement(CardElement);\n\n    const { error, paymentMethod } = await stripe.createPaymentMethod({ type: 'card', card: cardElement });\n    console.log({ error, paymentMethod })\n\n    if (error) {\n      console.log('[error]', error);\n    } else {\n      const shippingData={\n        firstname: 'John',\n        lastname: 'Doe',\n        email: 'john.doe@example.com',\n\n      }\n      const orderData = {\n        line_items: checkoutToken.live.line_items,\n        customer: { firstname: shippingData.firstName, lastname: shippingData.lastName, email: shippingData.email },\n        shipping: { name: 'International', street: shippingData.address1, town_city: shippingData.city, county_state: shippingData.shippingSubdivision, postal_zip_code: shippingData.zip, country: shippingData.shippingCountry },\n        fulfillment: { shipping_method: shippingData.shippingOption },\n        payment: {\n          gateway: 'stripe',\n          stripe: {\n            payment_method_id: paymentMethod.id,\n          },\n        },\n      };\n\n      onCaptureCheckout(checkoutToken.id, orderData);\n\n      nextStep();\n    }\n  };\n\n  return (\n    <>\n      <Review checkoutToken={checkoutToken} cart={cart}/>\n      <Divider />\n      <Typography variant=\"h6\" gutterBottom style={{ margin: '20px 0' }}>Payment method</Typography>\n      <Elements stripe={stripePromise}>\n        <ElementsConsumer>{({ elements, stripe }) => (\n          <form onSubmit={(e) => handleSubmit(e, elements, stripe)}>\n            <CardElement />\n            <br /> <br />\n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n              <Button variant=\"outlined\" onClick={backStep}>Back</Button>\n              <Button type=\"submit\" variant=\"contained\" disabled={!stripe} style={{ backgroundColor: '#1C2331', color: '#FFFF' }} >\n                Pay {checkoutToken.live.subtotal.formatted_with_symbol}\n              </Button>\n            </div>\n          </form>\n        )}\n        </ElementsConsumer>\n      </Elements>\n    </>\n  );\n};\n\nexport default PaymentForm;\n"]},"metadata":{},"sourceType":"module"}